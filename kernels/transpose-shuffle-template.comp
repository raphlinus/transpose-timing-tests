#version 450
#define NUM_BIT_MATRICES ~NUM_BMS~
#define WORKGROUP_SIZE ~WG_SIZE~

#extension GL_KHR_shader_subgroup_shuffle: enable

layout(local_size_x = 32) in;

layout(set = 0, binding = 0) buffer BM {
    uint[32] bm[];
};

uint shuffle_round(uint lbm, uint m, uint s) {
    uint b = subgroupShuffleXor(lbm, s);
    uint c;
    if ((gl_GlobalInvocationID.x & s) == 0) {
        c = b << s;
    } else {
        m = ~m;
        c = b >> s;
    }
    return (lbm & m) | (c & ~m);
}

void main() {
    // Recall that a workgroup's size is (N, 32, 1).
    // gl_LocalInvocationID ranges from (0, 0, 0) to (N - 1, 32 - 1, 0) (inclusive).
    uint local_bm_ix = gl_LocalInvocationID.x;
    uint dst_tix = gl_LocalInvocationID.y;
    // Is gl_GlobalInvocationID.x = gl_WorkGroupSize.x*gl_WorkGroupID.x + gl_LocalInvocationID.x?
    uint global_bm_ix = gl_GlobalInvocationID.x;

    uint lbm = bm[global_bm_ix][dst_tix];

    // subgroupBarrier(); ?

    lbm = shuffle_round(lbm, 0xffff, 16);
    lbm = shuffle_round(lbm, 0xff00ff, 8);
    lbm = shuffle_round(lbm, 0xf0f0f0f, 4);
    lbm = shuffle_round(lbm, 0x33333333, 2);
    lbm = shuffle_round(lbm, 0x55555555, 1);

    // subgroupBarrier(); ?

    bm[global_bm_ix][dst_tix] = lbm;
}
